#!/usr/bin/env node

'use strict';
const program = require('commander');
const fs = require('fs');
const repo = 'repo';
const repoimpl = 'repoimpl';
const route = 'route';

program
  .version('0.0.1')
  .command('generate <component>')
  .description('generate ddd component')
  .option('-n, --name <domain>', 'name of the domain')
  .action(function(component, options) {
    let domain = options.name;

    console.log(`Generating ${domain}.${component}.ts`);
    switch (component) {
      case repo: {
        let result = generateRepository(component, domain);
        return result;
      }
      case repoimpl: {
        let result = generateRepositoryImpl(component, domain);
        return result;
      }
      case route: {
        let result = generateRoute(component, domain);
        return result;
      }
    }
  });

program.parse(process.argv);

function generateRepository(component, domain) {
  let upper = domain[0].toUpperCase() + domain.slice(1, domain.length);

  console.log('Generate repository');
  let content = `import { ${upper} } from '@domain/${domain}/${domain}.model';
import { UpdateOption, Filter } from '@common/models/QueryOption';
import { DestroyOptions } from 'sequelize';

export interface ${upper}Repository {
  save(${domain}: ${upper}): Promise<${upper}>;
  findAll(filter: Filter): Promise<${upper}[]>;
  findById(id: number): Promise<${upper}>;
  update(
    ${domain}: Partial<${upper}>,
    option: UpdateOption<${upper}>
  ): Promise<[number, ${upper}[]]>;
  delete(option: DestroyOptions): Promise<number>;
}
`;
  fs.appendFileSync(`${domain}.repository.ts`, content);
  return;
}

function generateRepositoryImpl(component, domain) {
  let upper = domain[0].toUpperCase() + domain.slice(1, domain.length);

  fs.appendFileSync(
    `${domain}.repository.impl.ts`,
    ```
    import { ${upper} } from '@domain/${domain}}/${domain}}.model';
    import { DestroyOptions, UpdateOptions } from 'sequelize';
    import { Filter } from '@common/models/QueryOption';
    
    export class ${upper}RepositoryImpl {
      constructor() {}
    
      async save(${domain}}: ${upper}) {
        const _ = ${upper}.build(${domain}});
        return await _.save();
      }
    
      async findAll(filter: Filter) {
        return await ${upper}.findAll(filter);
      }
    
      async findById(id: number) {
        return await ${upper}.findByPrimary(id);
      }
    
      async update(
        ${domain}}: Partial<${upper}>,
        option: UpdateOptions
      ): Promise<[number, ${upper}[]]> {
        return await ${upper}.update(${domain}}, option);
      }
    
      async delete(option: DestroyOptions): Promise<number> {
        return await ${upper}.destroy(option);
      }
    }
    ```
  );
  return;
}

function generateRoute(component, domain) {
  let upper = domain[0].toUpperCase() + domain.slice(1, domain.length);

  fs.appendFileSync(
    `${domain}.route.ts`,
    ```
    import { Route } from 'server/common/models/Route';
    import * as express from 'express';
    import { httpSuccessResponse } from '@utils/httpSender';
    import { ${upper}Repository } from '@domain/${domain}}/${domain}}.repository';
    
    export class ${upper}Route implements Route {
      private router: express.Router;
      constructor(private ${domain}}Repository: ${upper}Repository) {
        this.${domain}}Repository = ${domain}}Repository;
        this.router = express.Router();
      }
      handle() {
        this.router.post('', (...args) => this.create(...args));
        this.router.get('', (...args) => this.findAll(...args));
        this.router.get('/:id', (...args) => this.findById(...args));
        this.router.put('', (...args) => this.update(...args));
        this.router.delete('', (...args) => this.remove(...args));
        return this.router;
      }
    
      private async create(
        req: express.Request,
        res: express.Response,
        next: express.NextFunction
      ) {
        try {
          let ${domain}} = req.body;
    
          let created = await this.${domain}}Repository.save(${domain}});
          return res.send(created);
        } catch (err) {
          return next(err);
        }
      }
    
      // @authGuard
      private async findAll(
        req: express.Request,
        res: express.Response,
        next: express.NextFunction
      ) {
        try {
          let ${domain}}s = await this.${domain}}Repository.findAll(req.query);
          return httpSuccessResponse(res, ${domain}}s);
        } catch (err) {
          return next(err);
        }
      }
    
      private async findById(
        req: express.Request,
        res: express.Response,
        next: express.NextFunction
      ) {
        try {
          let id = req.params.id;
          let ${domain}} = await this.${domain}}Repository.findById(id);
    
          return res.send(${domain}});
        } catch (err) {
          return next(err);
        }
      }
    
      private async update(
        req: express.Request,
        res: express.Response,
        next: express.NextFunction
      ) {
        try {
          let { ${domain}}, option } = req.body;
          let [count, ${domain}}List] = await this.${domain}}Repository.update(${domain}}, option);
    
          return httpSuccessResponse(res, ${domain}}List, count);
        } catch (err) {
          return next(err);
        }
      }
    
      private async remove(
        req: express.Request,
        res: express.Response,
        next: express.NextFunction
      ) {
        try {
          let option = req.body;
          let count = await this.${domain}}Repository.delete(option);
    
          res.send(count.toString());
        } catch (err) {
          return next(err);
        }
      }
    }
    ```
  );
  return;
}
