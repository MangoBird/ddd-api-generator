#!/usr/bin/env node

'use strict';
const program = require('commander');
const fs = require('fs');
const repo = 'repo';
const repoimpl = 'repoimpl';
const route = 'route';
const repoPath = './src/server/domain';
const repoImplPath = './src/server/infra/sequelizejs/mysql/repositories';
const routePath = './src/server/interfaces/http';
program
  .version('0.0.1')
  .command('generate <component>')
  .description('generate ddd component')
  .option('-n, --name <domain>', 'name of the domain')
  .action(function(component, options) {
    let domain = options.name;

    console.log(`Generating ${domain}.${component}.ts`);
    switch (component) {
      case repo: {
        let result = generateRepository(component, domain);
        return result;
      }
      case repoimpl: {
        let result = generateRepositoryImpl(component, domain);
        return result;
      }
      case route: {
        let result = generateRoute(component, domain);
        return result;
      }
    }
  });

program.parse(process.argv);

function generateRepository(component, domain) {
  let camel = makeCamel(domain);
  let upper = camel[0].toUpperCase() + camel.slice(1, camel.length);

  console.log('Generate repository');
  let content = `import { ${upper} } from '@domain/${domain}/${domain}.model';
import { UpdateOption, Filter } from '@common/models/QueryOption';
import { DestroyOptions } from 'sequelize';

export interface ${upper}Repository {
  save(${camel}: ${upper}): Promise<${upper}>;
  findAll(filter: Filter): Promise<${upper}[]>;
  findById(id: number): Promise<${upper}>;
  update(
    ${camel}: Partial<${upper}>,
    option: UpdateOption<${upper}>
  ): Promise<[number, ${upper}[]]>;
  delete(option: DestroyOptions): Promise<number>;
}
`;
  fs.appendFileSync(`${repoPath}/${domain}/${domain}.repository.ts`, content);
  return;
}

function generateRepositoryImpl(component, domain) {
  let camel = makeCamel(domain);
  let upper = camel[0].toUpperCase() + camel.slice(1, camel.length);
  let content = `
import { ${upper} } from '@domain/${domain}/${domain}.model';
import { DestroyOptions, UpdateOptions } from 'sequelize';
import { Filter } from '@common/models/QueryOption';

export class ${upper}RepositoryImpl {
  constructor() {}

  async save(${camel}: ${upper}) {
    const _ = ${upper}.build(${camel});
    return await _.save();
  }

  async findAll(filter: Filter) {
    return await ${upper}.findAll(filter);
  }

  async findById(id: number) {
    return await ${upper}.findByPrimary(id);
  }

  async update(
    ${camel}: Partial<${upper}>,
    option: UpdateOptions
  ): Promise<[number, ${upper}[]]> {
    return await ${upper}.update(${camel}, option);
  }

  async delete(option: DestroyOptions): Promise<number> {
    return await ${upper}.destroy(option);
  }
}
`;
  fs.appendFileSync(`${repoImplPath}/${domain}.repository.impl.ts`, content);
  return;
}

function generateRoute(component, domain) {
  let camel = makeCamel(domain);
  let upper = camel[0].toUpperCase() + camel.slice(1, camel.length);
  const content = `
import { Route } from 'server/common/models/Route';
import * as express from 'express';
import { httpSuccessResponse } from '@utils/httpSender';
import { ${upper}Repository } from '@domain/${domain}/${domain}.repository';

export class ${upper}Route implements Route {
  private router: express.Router;
  constructor(private ${camel}Repository: ${upper}Repository) {
    this.${camel}Repository = ${camel}Repository;
    this.router = express.Router();
  }
  handle() {
    this.router.post('', (...args) => this.create(...args));
    this.router.get('', (...args) => this.findAll(...args));
    this.router.get('/:id', (...args) => this.findById(...args));
    this.router.put('', (...args) => this.update(...args));
    this.router.delete('', (...args) => this.remove(...args));
    return this.router;
  }

  private async create(
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ) {
    try {
      let ${camel} = req.body;

      let created = await this.${camel}Repository.save(${camel});
      return res.send(created);
    } catch (err) {
      return next(err);
    }
  }

  // @authGuard
  private async findAll(
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ) {
    try {
      let ${camel}s = await this.${camel}Repository.findAll(req.query);
      return httpSuccessResponse(res, ${camel}s);
    } catch (err) {
      return next(err);
    }
  }

  private async findById(
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ) {
    try {
      let id = req.params.id;
      let ${camel} = await this.${camel}Repository.findById(id);

      return res.send(${camel});
    } catch (err) {
      return next(err);
    }
  }

  private async update(
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ) {
    try {
      let { ${camel}, option } = req.body;
      let [count, ${camel}List] = await this.${camel}Repository.update(${camel}, option);

      return httpSuccessResponse(res, ${camel}List, count);
    } catch (err) {
      return next(err);
    }
  }

  private async remove(
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ) {
    try {
      let option = req.body;
      let count = await this.${camel}Repository.delete(option);

      res.send(count.toString());
    } catch (err) {
      return next(err);
    }
  }
}
`;
  fs.appendFileSync(`${routePath}/${domain}.route.ts`, content);
  return;
}

function makeCamel(target) {
  let words = target.split('-');
  console.log(words);
  let camel = '';

  for (let i = 0; i < words.length; i++) {
    if (i === 0) {
      camel += words[i];
    } else {
      camel += words[i][0].toUpperCase() + words[i].slice(1, words[i].length);
    }

    console.log(camel);
  }
  return camel;
}
